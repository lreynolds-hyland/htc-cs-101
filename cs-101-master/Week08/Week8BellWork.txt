Pre Collections Post Loop Challenge / Bell Work

1. Summing all odd integers from 1 - 100
1a. As this has a known value to stop on, this is a good candidate for using a for loop over a while loop
1b. The for loop syntax is:
for ( <initialize> ; <condition> ; <increment> )
{ 
// code
}

1c. The <initialize> is where you initialize a variable to keep track of what iteration the loop is on.
Generally, this variable is initialized to 0 or 1.
One "iteration" means one execution of the code within the brackets. For example, if we say a loop had
10 iterations, that means the code within the brackets was executed 10 times.

1d. The <condition> is where you tell the loop when to stop. You can use the variable you initialized in 
(1c) in this condition. Examples of conditions are i < 10 which means that the loop should stop executing 
once i is no longer less than 10.

1e. The <increment> is where you change your variable from (1c) to help move your loop along. An example of 
this would be i++. This means that at the end of an iteration, i would be increased by 1. This incrementation 
could cause the <condition> to fail (if i is now too big) and cause the loop to end.

1f. Outside, of your for loop, create a variable to hold the sum of these numbers.
1g. Create a for loop such that your loop variable (different variable from your sum variable) starts at 1 and 
goes until 100. When your variable is 100, an iteration should execute, however, when your variable is 101 it should not.
1h. Inside you loop, you should check if the number is odd, and IF so, add it to your sum variable.

1i. Once your loop has completed, print the sum you got to the console.


2. Upper case all user input until the user types quit. 
 - Continuously take in user input, convert that input all to lower case, and then print out the modified input.
 - Continue doing this until the user types "quit" then end your program.
2a. This issue does not have a known value to stop on, so using a while loop is better than a for loop in this case.
2b. The while loop syntax is:
while ( <condition> )
{
// code
}

2c. The <condition> represents whether or not the loop should execute again. If this evaluates to false,
the code within the brackets will not be executed anymore. If it evaluates to true, the code within 
the brackets will be executed again.

2d. In this case, the thing that will eventually stop your loop is whether or not the input is equal to "quit",
so you should do something with this information to create your <condition>.

2e. Once inside the brackets of your loop, you need to take your input (which should be a string) and convert
it to lower case. You can use the method .ToLower() to help out.

2f. Once you've converted your string, print it out!

2g. Then, ask for a new input, and it's time to do it all over again!